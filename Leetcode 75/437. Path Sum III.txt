# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        count = 0
        def dfs(root, targetSum, CurrSum):
            nonlocal count
            if not root:
                return
            if root.val + CurrSum == targetSum: 
                count = count + 1 
            dfs(root.left, targetSum, root.val+CurrSum)
            dfs(root.right, targetSum, root.val+CurrSum)

        def dfs_helper(root, targetSum):
            if not root:
                return
            dfs(root, targetSum, 0)
            dfs_helper(root.left, targetSum)
            dfs_helper(root.right, targetSum)
        
        dfs_helper(root,targetSum)
        return count
